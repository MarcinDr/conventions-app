// <auto-generated />
using System;
using Conventions.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Conventions.Domain.Migrations
{
    [DbContext(typeof(ConventionsDbContext))]
    partial class ConventionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountTalk", b =>
                {
                    b.Property<string>("AttendeesId")
                        .HasColumnType("text")
                        .HasColumnName("attendees_id");

                    b.Property<Guid>("TalksAsAttendeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("talks_as_attendee_id");

                    b.HasKey("AttendeesId", "TalksAsAttendeeId")
                        .HasName("pk_talks_attendees");

                    b.HasIndex("TalksAsAttendeeId")
                        .HasDatabaseName("ix_talks_attendees_talks_as_attendee_id");

                    b.ToTable("talks_attendees", (string)null);
                });

            modelBuilder.Entity("Conventions.Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Conventions.Domain.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_events_venue_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Conventions.Domain.Models.Talk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SpeakerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("speaker_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_talks");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_talks_event_id");

                    b.HasIndex("SpeakerId")
                        .HasDatabaseName("ix_talks_speaker_id");

                    b.ToTable("talks", (string)null);
                });

            modelBuilder.Entity("Conventions.Domain.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("website_url");

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("AccountTalk", b =>
                {
                    b.HasOne("Conventions.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_talks_attendees_accounts_attendees_id");

                    b.HasOne("Conventions.Domain.Models.Talk", null)
                        .WithMany()
                        .HasForeignKey("TalksAsAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_talks_attendees_talks_talks_as_attendee_id");
                });

            modelBuilder.Entity("Conventions.Domain.Models.Event", b =>
                {
                    b.HasOne("Conventions.Domain.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_events_venues_venue_id");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Conventions.Domain.Models.Talk", b =>
                {
                    b.HasOne("Conventions.Domain.Models.Event", "Event")
                        .WithMany("Talks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_talks_events_event_id");

                    b.HasOne("Conventions.Domain.Models.Account", "Speaker")
                        .WithMany("TalksAsSpeaker")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_talks_accounts_speaker_id");

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Conventions.Domain.Models.Account", b =>
                {
                    b.Navigation("TalksAsSpeaker");
                });

            modelBuilder.Entity("Conventions.Domain.Models.Event", b =>
                {
                    b.Navigation("Talks");
                });

            modelBuilder.Entity("Conventions.Domain.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
